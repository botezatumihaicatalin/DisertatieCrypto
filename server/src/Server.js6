import http from 'http'
import SocketServer from 'socket.io'

import User from './User'
import UsersPool from './UsersPool'
import StreamMap from './StreamMap'

const httpServer = http.createServer();
const io = new SocketServer(httpServer, { serveClient: false });

const port = process.env.PORT || 3000;
httpServer.listen(port, () => {
	console.log('server listening on port ' + port)
});

const users = new UsersPool();
const streams = new StreamMap();

io.on('connection', (socket) => {

	const newUser = users.fromSocket(socket);

	socket.emit('user_data', newUser.toJSON());
	socket.emit('users_data', users.toJSON())
	io.sockets.emit('users_data', users.toJSON());

	socket.on('get_user_data', (fn) => {
		fn(newUser.toJSON())
	})

	socket.on('get_users_data', (fn) => {
		fn(users.toJSON())
	})
	
	socket.on('set_name', (name, fn) => {
		newUser.name = name, fn(newUser.toJSON())
	})

	socket.on('user_data', (fn) => {
		fn(newUser.toJSON())
	})

	socket.on('stream', data => {
		const linked = streams.outgoingTo(newUser.id)
		linked.forEach(userId => {
			const user = users.get(userId)
			user.socket.emit('stream', data)
		})
	})

	socket.on('user_stream', (userId, fn) => {
		if (!users.has(userId)) {
			return
		}
		streams.unlinkIncoming(newUser.id)
		streams.link(userId, newUser.id)
		console.log('Streams state', JSON.stringify(streams.toJSON(), null, 4))
		console.log('--------------')
		fn(users.get(userId).toJSON())
	})

	socket.on('disconnect', () => {
		users.delete(newUser.id), streams.delete(newUser.id);
		console.log('Streams state', JSON.stringify(streams.toJSON(), null, 4))
		console.log('--------------')
		socket.broadcast.emit('users_data', users.toJSON())
	})
});

