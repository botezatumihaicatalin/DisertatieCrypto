import { PwlcmSpicCipher3 } from 'chaotic-image-crypto/lib/bindings'
import { toRgbUint8ClampedArray, toRgbaUint8ClampedArray } from './ArrayUtils'

export default class ElementRenderer {

  constructor(options) {
    this.width = options.width
    this.height = options.height
    this.format = options.format || 'image/png'

    this.cipher = new PwlcmSpicCipher3();
    this.cipher.initKey({ x1: 0.1567, y1: 0.3219, r1: 0.2, m1: 2015,
                 x2: 0.4567, y2: 0.1111, r2: 0.3, m2: 2016, iv: 123456 })
  }

  _createCanvas(width, height) {
    const canvas = document.createElement('canvas')
    canvas.width = width, canvas.height = height
    return canvas
  }

  _createAndDrawInCanvas(element) {
    const canvas = this._createCanvas(this.width, this.height)
    const context = canvas.getContext('2d')
    context.drawImage(element, 0, 0, this.width, this.height)
    return canvas
  }

  _getImageData(canvas) {
    const context = canvas.getContext('2d')
    return context.getImageData(0, 0, this.width, this.height)
  }

  drawInCanvas(element) {
    return this._createAndDrawInCanvas(element)
  }

  getEncryptedDataURL(element, callback) {
    console.time('Process')

    const canvas = this._createAndDrawInCanvas(element)
    const context = canvas.getContext('2d')
    const imgData = context.getImageData(0, 0, this.width, this.height)

    const rgbPixels = toRgbUint8ClampedArray(imgData.data);
    const rgbEncrypted = this.cipher.encrypt(rgbPixels);
    const rgbaEncrypted = toRgbaUint8ClampedArray(rgbEncrypted);

    imgData.data.set(rgbaEncrypted)
    context.putImageData(imgData, 0, 0);

    callback(canvas.toDataURL('image/bmp'));

    console.timeEnd('Process')
  }

  decryptDataURLInCanvas(data, canvas, callback) {
    const image = new Image()

    image.onload = (data) => {
      console.time('Process')

      const dCanvas = this._createAndDrawInCanvas(image)
      const dContext = dCanvas.getContext('2d')
      const dImageData = dContext.getImageData(0, 0, this.width, this.height)

      const rgbPixels =  toRgbUint8ClampedArray(dImageData.data);
      const rgbDecrypted = this.cipher.decrypt(rgbPixels);
      const rgbaDecrypted = toRgbaUint8ClampedArray(rgbDecrypted);

      dImageData.data.set(rgbaDecrypted)
      dContext.putImageData(dImageData, 0, 0)

      const context = canvas.getContext('2d')
      context.drawImage(dCanvas, 0, 0, canvas.width, canvas.height);
      if (callback) callback(canvas)

      console.timeEnd('Process')
    }

    image.src = data
  }
}
