const { dialog } = require('electron').remote

import IOServerService from './IOServerService'
import ElementRenderer from './ElementRenderer'


export default class StreamController {

  constructor() {
    this.videoPlayer = document.getElementById('video_player');
    this.streamPreview = document.getElementById('stream_preview');
    this.streamContext = this.streamPreview.getContext('2d');
    this.renderer = new ElementRenderer({ width: 320, height: 240 })

    IOServerService.onStreamReceived(data => {
      return this.onStreamReceived(data)
    })

    this.broadcasting = false
  }

  chooseSourceVideo() {
    const filePaths = dialog.showOpenDialog({
      title: "Choose a video file",
      properties: [
        'openFile',
      ],
      filters: [
        { name: 'Videos', extensions: ['mkv', 'avi', 'mp4', 'webm', 'ogv'] } ,
        { name: 'All Files', extensions: ['*'] }
      ]
    })
    if (filePaths && filePaths.length > 0) {
      this.videoPath = filePaths[0]
    }
  }

  toggleBroadcast() {
    const broadcasting = !this.broadcasting
    if (broadcasting) {
      // this.sendSnapshot()
      this.interval = setInterval(() => this.sendSnapshot(), 100);
    }
    else {
      clearInterval(this.interval)
    }
    this.broadcasting = broadcasting
  }

  sendSnapshot() {
    this.renderer.getEncryptedDataURL(this.videoPlayer, (data) => {
      IOServerService.sendStream(data);
    })
  }

  onStreamReceived(data) {
    this.renderer.decryptDataURLInCanvas(data, this.streamPreview)
  }
}
