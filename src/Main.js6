import WebCamera from 'webcamjs'
import ImageCrypto from 'chaotic-image-crypto/lib/bindings'

const cameraRatio = 4/3;
const cameraHeight = 480;
const cameraWidth = cameraRatio * cameraHeight;

WebCamera.set({
  width: cameraWidth,
  height: cameraHeight,
  dest_width: cameraWidth,
  dest_height: cameraHeight,
});
WebCamera.set('constraints', {
  width: cameraWidth,
  height: cameraHeight
});

WebCamera.attach('#camdemo');

const canvasEncrypted = document.getElementById('encrypted')
const contextEncrypted = canvasEncrypted.getContext('2d');
canvasEncrypted.width = cameraWidth;
canvasEncrypted.height = cameraHeight;

const canvasDecrypted = document.getElementById('decrypted')
const contextDecrypted = canvasDecrypted.getContext('2d');
canvasDecrypted.width = cameraWidth;
canvasDecrypted.height = cameraHeight;

const video = document.querySelector('#camdemo > video')

WebCamera.on('live', () => {

  const pollInterval = 10
  const snap = () => {

    const webcamCanvas = document.createElement('canvas');
    webcamCanvas.width = cameraWidth
    webcamCanvas.height = cameraHeight
    const webcamContext = webcamCanvas.getContext('2d');
    webcamContext.drawImage(video, 0, 0, webcamCanvas.width, webcamCanvas.height)
    const webcamImageData = webcamContext.getImageData(0, 0, webcamCanvas.width, webcamCanvas.height)

    console.time('Encryption')
    const encryptedPixels = ImageCrypto.Encrypt(webcamImageData.data)
    console.timeEnd('Encryption')

    const encryptedImgData = contextEncrypted.getImageData(0, 0, webcamCanvas.width, webcamCanvas.height);
    encryptedImgData.data.set(encryptedPixels, 0)
    contextEncrypted.putImageData(encryptedImgData, 0, 0);

    console.time('Decryption')
    const decryptedPixels = ImageCrypto.Decrypt(encryptedPixels)
    console.timeEnd('Decryption')

    const decryptedImgData = contextEncrypted.getImageData(0, 0, webcamCanvas.width, webcamCanvas.height);
    decryptedImgData.data.set(decryptedPixels, 0)
    contextDecrypted.putImageData(decryptedImgData, 0, 0);

    setTimeout(snap, pollInterval);
  }

  snap();
})

window.addEventListener('beforeunload', () => {
  WebCamera.reset();
})

